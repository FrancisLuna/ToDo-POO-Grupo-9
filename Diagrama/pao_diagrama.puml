@startuml ToDoList

title TP - TODO List - Grupo 9
skinparam lineType ortho

class Aplicacion{
    - usuario: Usuario
    - gestorDeTarea: GestorDeTarea
    - gestorDeEstadisticas: GestorDeEstadisticas
}

class GestorDeEstadisticas{
    + tiempoPromedioDedicadoALasTareas(tareas: Array<Tarea>): datetime
    + cantidadDeTareasPorEstado(tareas: Array<Tarea>): Map<string, cantidad>
    + CantidadDeTareasPorCategoría(tareas: Array<Tarea>): Map<string, cantidad>
}

class Usuario{
    - email: string
    - contraseña: string
    - tareas: Array<Tarea>
    - etiquetasCreadas: Etiqueta[]
    - categoriasCreadas: Categoria[]

    + setEmail(email: string): void
    + getEmail(): string
    + setContraseña(contraña: string): void
    + getContraseña(): string
    + crearEtiqueta(): void
    + crearCategoria(): void
}

class Tarea{
    - titulo: string
    - descripcion: string
    - fechaVencimiento: Date
    - fechaCreacion: Date
    - prioridad: Prioridad
    - avance: Avance
    - estado: Estado
    - categoría: Categoria
    - etiquetas: Etiqueta[]
    
    + setTitulo(titulo: string): void
    + setDescripcion(descripcion: string): void
    + setFechaVencimiento(fecha: Date): void
    + setPrioridad(prioridad: Prioridad): void
    + setCategoria(categoria: Categoria): void
    + setEtiqueta(etiqueta: Etiqueta): void
    + setAvance(avance: Avance): void
    + setEstado(estado: Estado): void

    + getTitulo(): string
    + getDescripcion(): string
    + getFechaVencimiento(): Date
    + getPrioridad(): Prioridad
    + getCategoria(): Categoria
    + getEtiquetas(): Etiqueta[]
    + getAvance(): Avance
    + getEstado(): Estado
}

ENUM Estado{
    - Pendiente
    - EnProgreso
    - Completado
}

ENUM Avance{
    - 0
    - 25
    - 50
    - 75
    - 100
}

ENUM Prioridad{
    - Alta
    - Media
    - Baja
}

abstract class Marcador{
    - nombre
    + getNombre(): string
}

class Etiqueta extends Marcador{}
class Categoria extends Marcador{}

class GestorDeTarea{
    + crearTarea(tarea: Tarea): void
    + eliminarTarea(tarea: Tarea): void
    + editarTarea(tarea: Tarea): void
    + ordenarTareasPorPrioridad(): Tarea[]
    + ordenarTareasPorFecha(): Tarea[]
    + buscarTareaPorTitulo(titulo: string): Tarea | null
    + getTareasCompletadas(): Tarea[]
    + getTareasPendientes(): Tarea[]
    + notificarRecordatorio()
}

Aplicacion *-- Usuario
Aplicacion <-- GestorDeTarea
Aplicacion <-- GestorDeEstadisticas
GestorDeEstadisticas *-- GestorDeTarea
Tarea *-- Usuario
Tarea o-- Marcador
Tarea o-- Prioridad
Tarea o-- Estado
Tarea o-- Avance

@enduml