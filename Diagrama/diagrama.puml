@startuml ToDoList

title TP - TODO List - Grupo 9
skinparam lineType ortho

class Tarea{
   - id: number
   - titulo: string
   - descripcion: string
   - fechaCreacion: Moment
   - fechaVencimiento: Moment
   - prioridad: Prioridad
   - avance: Avance
   - estados: Map<Estado,Moment>
   - estadoActual: Estado
   - categoria: Categoria | undefined
   - etiquetas: Etiqueta[]
    
    + setTitulo(): void
    + getTitulo(): number
    + setTitulo(titulo: string): void
    + getTitulo(): string
    + setDescripcion(desc: string): void
    + getDescripcion(): string
    + getFechaCreacion(): Date
    + setFechaVencimiento(fecha: Date): void
    + getFechaVencimiento(): Date
    + setPrioridad(prioridad: Prioridad): void
    + getPrioridad(): Prioridad
    + setAvance(avance: Avance): void
    + getAvance(): Avance
    + setEstado(estado: Estado): void
    + getEstadoActual(): Estado
    + getEstados(): Map<Estado,Moment>
    + setCategoria(categoria: Categoria): void
    + getCategoria(): Categoria | undefined
    + setEtiqueta(etiqueta: Etiqueta): void
    + getEtiquetas(): Etiqueta[]
    + eliminarEtiqueta(nombre: string): void
}

class ColeccionDeTareas{
    - tareas: Array<Tarea>
    + agregarTarea(nuevaTarea: Tarea): void
    + eliminarTarea(idTarea: number, TituloDeTarea: string): void
    + getTareas(): Tarea[]
}

class BuscadorDeTarea{
    - tareas: Array<Tarea>

    + getTareaPorTitulo(titulo: string): Tarea | undefined
    + getTareasCompletadas(): Tarea[]
    + getTareasPorVencimiento(): Tarea[]
    + getTareasPendientes(): Tarea[]
    + getTareasEnProgreso(): Tarea[]
    + getTareasPorEtiqueta(etiqueta: Etiqueta): Tarea[]
    + getTareasPorCategoria(categoria: Categoria): Tarea[]
}

class OrganizadorDeTarea{
    - tareas: Array<Tarea>

    + ordenarTareasPorPrioridad(): Tarea[]
    + ordenarTareasPorVencimiento(): Tarea[]
    + ordenarTareasPorTitulo(): Tarea[]
}

class GestorDeEstadisticas{
    - tareas: Array<Tarea>
    - buscadorDeTarea: BuscadorDeTarea

    + obtenerTiempoDeFinalizacionDeUnaTarea(tarea: Tarea): number
    + obtenerTiempoDedicadoPorTarea(): Map<number, number>
    + obtenerTiempoDeFinalizacionDeTareas(): number
    + obtenerTiempoPromedioDeFinalizacion(): number
    + obtenercantidadDeTareasPorEstado(): Map<Estado, number>
}

class GestorDeNotificaciones{
    + notificarRecordatorio()
}

abstract class Clasificador{
    - nombre: string

    + getNombre(): string
    + setNombre(nombre: string): void
}

class Categoria {}
class Etiqueta {}

ENUM ESTADO{
    Pendiente
    EnProgreso
    Completado
}

ENUM AVANCE{
    0
    25
    50
    75
    100
}

ENUM PRIORIDAD{
    Alta
    Media
    Baja
}

GestorDeEstadisticas <-- Tarea
GestorDeNotificaciones <-- Tarea
OrganizadorDeTarea <-- Tarea
BuscadorDeTarea <-- Tarea
Tarea *-- Categoria
Tarea *-- Etiqueta
Tarea -left-> ColeccionDeTareas
Categoria --|> Clasificador
Etiqueta --|> Clasificador
Tarea -right- ESTADO
Tarea -right- AVANCE
Tarea -right- PRIORIDAD
GestorDeEstadisticas *-left- BuscadorDeTarea
@enduml